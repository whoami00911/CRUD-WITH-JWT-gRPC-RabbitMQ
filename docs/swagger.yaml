basePath: /
definitions:
  domain.AssetData:
    properties:
      abuseConfidenceScore:
        description: Оценка злоупотребления (от 0 до 100)
        type: integer
      countryCode:
        description: Код страны
        type: string
      countryName:
        description: Название страны
        type: string
      ipAddress:
        description: IP-адрес актива
        type: string
      ipVersion:
        description: Версия IP (4 или 6)
        type: integer
      isCache:
        type: boolean
      isFromDB:
        type: boolean
      isPublic:
        description: Является ли IP-адрес публичным
        type: boolean
      isTor:
        description: Является ли IP узлом выхода Tor
        type: boolean
      isWhitelisted:
        description: Находится ли IP-адрес в белом списке
        type: boolean
      isp:
        description: Интернет-провайдер (ISP)
        type: string
      usageType:
        description: Тип использования (например, дата-центр/веб-хостинг)
        type: string
    type: object
  domain.User:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - name
    - password
    - username
    type: object
  domain.UserSignIn:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
host: localhost:8080
info:
  contact: {}
  description: project5
  title: rest with swagger and authorization with JWT tokens
  version: "1.0"
paths:
  /Abuseip/:
    delete:
      description: Delete all entitys from cache and database
      responses:
        "200":
          description: All entitys deleted
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete all entitys
      tags:
      - CRUD
    get:
      description: Get all entitys from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.AssetData'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all entitys
      tags:
      - CRUD
    post:
      consumes:
      - application/json
      description: Create a new entity and store it in the database
      parameters:
      - description: Asset Data
        in: body
        name: asset
        required: true
        schema:
          $ref: '#/definitions/domain.AssetData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new entity
      tags:
      - CRUD
    put:
      consumes:
      - application/json
      description: Update existing entity in database
      parameters:
      - description: Asset Data
        in: body
        name: asset
        required: true
        schema:
          $ref: '#/definitions/domain.AssetData'
      produces:
      - application/json
      responses:
        "201":
          description: Updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update existing entity
      tags:
      - CRUD
  /Abuseip/{ip}:
    delete:
      description: Delete an entity by IP address from cache and database
      parameters:
      - description: IP Address
        in: path
        name: ip
        required: true
        type: string
      responses:
        "200":
          description: entity deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete an entity by IP
      tags:
      - CRUD
    get:
      description: Get an entity by IP address from cache or database
      parameters:
      - description: IP Address
        in: path
        name: ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AssetData'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get an entity by IP
      tags:
      - CRUD
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: Refreshes the JWT token and refresh token using the provided refresh
        token from the cookie.
      parameters:
      - description: Refresh token from the cookie
        in: header
        name: CookieToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated JWT token and new refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad cookie or token refresh error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Obsolete token or unauthorized access
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh Tokens
      tags:
      - Auth
  /auth/signIn:
    post:
      consumes:
      - application/json
      description: Authenticates a user using provided credentials (username and password).
        Returns a JWT token and a refresh token upon successful authentication.
      parameters:
      - description: User credentials for sign in
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UserSignIn'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token and refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or incorrect username/password
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Authentication
      tags:
      - Auth
  /auth/signUp:
    post:
      consumes:
      - application/json
      description: Create a new user and store it in the database
      parameters:
      - description: Domain User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: User ID
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
  RefreshTokenAuth:
    in: header
    name: RefreshToken
    type: apiKey
swagger: "2.0"
